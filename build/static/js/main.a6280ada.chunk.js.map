{"version":3,"sources":["avatar.png","ChatList.js","ChatBox.js","logo.svg","App.js","registerServiceWorker.js","index.js"],"names":["ChatList","chats","map","chat","className","username","text","src","avatar","alt","id","ChatBox","handleTextChange","type","value","placeholder","onChange","onKeyDown","App","props","state","appointment","window","prompt","this","setState","pusher","Pusher","cluster","encrypted","authEndpoint","auth","params","console","log","channel","subscribe","bind","data","e","keyCode","payload","axios","post","target","logo","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.a6280ada.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/avatar.0334f4b4.png\";","import React from \"react\";\r\nimport \"./ChatList.css\";\r\nimport avatar from \"./avatar.png\";\r\n\r\nconst ChatList = ({ chats }) => (\r\n  <ul>\r\n    {chats.map(chat => {\r\n      return (\r\n        <div key={chat.id}>\r\n          <div className=\"row show-grid\">\r\n            <div className=\"col-xs-12\">\r\n              \r\n              <div className=\"chatMessage\">\r\n                <div className=\"box\">\r\n                  <p><strong>{chat.username}:</strong> {chat.text}</p>\r\n                </div>\r\n\r\n                <div className=\"imageHolder\">\r\n                <img src={avatar} className=\"img-responsive avatar\" alt=\"logo\" />\r\n              </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    })}\r\n  </ul>\r\n);\r\n\r\nexport default ChatList\r\n","import React from \"react\";\r\nimport './ChatBox.css';\r\n\r\nconst ChatBox = ({ text, username, handleTextChange }) => (\r\n  <div>\r\n    <div className=\"row\">\r\n    <div className=\"col-xs-12\">\r\n      <div className=\"chat\">\r\n        <div className=\"col-xs-5 col-xs-offset-3\">\r\n          <input\r\n            type=\"text\"\r\n            value={text}\r\n            placeholder=\"Type a message\"\r\n            className=\"form-control\"\r\n            onChange={handleTextChange}\r\n            onKeyDown={handleTextChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"clearfix\"></div>\r\n      </div>\r\n    </div>\r\n\r\n    <h4 className=\"greetings\">Hello, {username}</h4>\r\n  </div>\r\n    </div>\r\n);\r\n\r\nexport default ChatBox\r\n","export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Pusher from 'pusher-js';\r\nimport ChatList from './ChatList';\r\nimport ChatBox from './ChatBox';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: '',\r\n      username: '',\r\n      appointment: '',\r\n      chats: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const username = window.prompt('Username: ', 'Anonymous');\r\n    this.setState({ username });\r\n    const appointment = window.prompt('AppointmentID: ', 'null');\r\n    this.setState({ appointment });\r\n    const pusher = new Pusher('860995510ee9701b6238', {\r\n      cluster: 'ap2',\r\n      encrypted: true,\r\n      authEndpoint: \"http://localhost:5000/p_auth\",\r\n      auth : {\r\n        params: {\r\n          appointment,\r\n          username\r\n        }\r\n      }\r\n    });\r\n    console.log(\"This is appointment: \", appointment)\r\n    //this works\r\n    const channel = pusher.subscribe(\"private-\" + appointment);\r\n    console.log(channel)\r\n    \r\n    channel.bind('inserted', data => {\r\n      this.setState({ chats: [...this.state.chats, data]});\r\n      console.log(\"This is data: \", data)\r\n    });\r\n    \r\n    this.handleTextChange = this.handleTextChange.bind(this);\r\n    \r\n  }\r\n  \r\n  \r\n  handleTextChange(e) {\r\n    if (e.keyCode === 13) {\r\n      const payload = {\r\n        username: this.state.username,\r\n        appointment: this.state.appointment,\r\n        text: this.state.text\r\n      };\r\n      axios.post('http://localhost:5000/chatApi/sendMsg', payload);\r\n    } else {\r\n      this.setState({ text: e.target.value });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h1 className=\"App-title\">Welcome to reALTIME Chat</h1>\r\n        </header>\r\n        <section>\r\n          <ChatList chats={this.state.chats} />\r\n          <ChatBox\r\n            text={this.state.text}\r\n            username={this.state.username}\r\n            handleTextChange={this.handleTextChange}\r\n          />\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}